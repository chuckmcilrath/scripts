#!/bin/bash

# Global Variables
resolved_path=/etc/systemd/resolved.conf
net_int=/etc/network/interfaces

# Function to check if the entered IP is valid for the systemd-resolved configuration.
is_valid_ip() {
    local ip=$1
    local IFS='.'
    local -a octets=($ip)

        [[ "${octets[0]}" -eq 127 ]] && return 1
        [[ ${#octets[@]} -ne 4 ]] && return 1

        # Check each octet is between 0 and 255
        for octet in "${octets[@]}"; do
            [[ ! "$octet" =~ ^[0-9]+$ ]] && return 1
            ((octet < 0 || octet > 255)) && return 1
        done

        return 0  # IP is valid
    }

#Function to check the user's CIDR input to make sure it's within 0-32.
cidr_check() {
    local cidr=$1
        [[ $cidr =~ ^[0-9]+$ ]] || return 1
	((cidr >= 0 && cidr <= 32))
}

# Function to check installs of important apps.
check_install() {
    local install_name="$1"
	echo "looking for $install_name..."
    	if ! dpkg -l | grep -qw "$install_name"; then
	    echo "Installing $install_name..."
	    apt install $install_name -y &> /dev/null
	    if dpkg -l | grep -qw "$install_name"; then
		echo "$install_name has been successfully installed."
	    else
		echo "Installation failed. Please clear the error and try again."
		exit 1
	    fi
	else
	    echo "$install_name is already installed. Continuing..."
	fi
}

# Function to check input is 256-bit key
key_check() {
    local key="$1"
    [[ "$key" =~ ^[A-Za-z0-9+/]{43}=$ ]] && return 0
    return 1
}

# Start of the Script with options.
while true; do
    # Input from user
    read -p $'\nChoose the install type:\n\n1. (OPTIONAL) Set Static IP\n2. Wireguard Server\n3. Wireguard Server Peer Config\nType "exit" to exit the script: ' install_type
    case "$install_type" in
        1) 
			# Static IP configuration
            echo -e "\n***WARNING***\nOnce you change the IP, you WILL be disconnected.\nYou will need to re-connect using the correct IP.\n"

            # checks to see if network is DHCP, then changes it to static and adds address and gateway.
            echo "Setting up network config file for static deployment"
            if grep -q dhcp $net_int; then
                sed -i 's/dhcp/static/' $net_int \
                && echo -e "        address\n        gateway" >> $net_int
            else
                :
            fi

            # Edits the IP
            while true; do
                read -p "Input the static IP you would like to use. (e.g. 192.168.0.1): " static_ip
                read -p "Are you sure you want to use "$static_ip"? y/n: " static_confirm
                if is_valid_ip "$static_ip"; then
                    if [[ $static_confirm == y ]]; then
                        if grep -q address $net_int; then
                            sed -i "/address/c\        address "$static_ip" " $net_int \
                            && echo "Address has been changed."
                            break
                        else
                            echo -e "Failed to change address. Please make sure dhcp is on the correct line.\nExiting Script."
                            exit 1
                        fi
                    elif [[ $static_confirm == n ]]; then
                        echo "Please try again."
                    else
                        echo "not a valid answer. Please use \"y\" or \"n\"."
                    fi
                else
                    echo "not a valid IP. Please enter a valid IP."
                fi
            done

            # Adds the CIDR notation to the end of the IP.
            while true; do
                read -p "Enter the subnet in CIDR notation. (e.g. 24): " cidr_input
                read -p "Are you sure you want to use "$cidr_input"? y/n: " cidr_confirm
                if cidr_check "$cidr_input"; then
                    if [[ $cidr_confirm == y ]]; then
                        if grep -q "$static_ip" $net_int; then
                            sed -i "/"$static_ip"/c\        address "$static_ip"\/"$cidr_input" " $net_int \
                            && echo "Subnet has been added."
                            break
                        else
                            echo -e "Failed to change subnet. Please make sure dhcp is on the correct line.\nExiting Script."
                            exit 1
                        fi
                    elif [[ $cidr_confirm == n ]]; then
                        echo "Please try again."
                    else
                        echo "not a valid answer. Please use \"y\" or \"n\"."
                    fi
                else
                    echo "Not a valid input. Please choose a number 0-32."
                fi
            done

            # Edits the Gateway
            while true; do
                read -p "Input the gateway: " static_gw
                read -p "Are you sure you want to use "$static_gw"? y/n: " static_gw_confirm
                if is_valid_ip "$static_gw"; then   
                    if [[ $static_gw_confirm = y ]]; then
                        if grep -q address $net_int; then
                            sed -i "/gateway/c\        gateway "$static_gw" " $net_int \
                            && echo "Gateway has been changed."
                            break
                        else
                            echo -e "Failed to change Gateway. Please make sure dhcp is on the correct line.\nExiting Script."
                            exit 1
                        fi
                    elif [[ $static_gw_confirm = n ]]; then
                        echo "Please try again."
                    else
                        echo "not a valid answer. Please use \"y\" or \"n\"."
                    fi
                else
                    echo "not a valid IP. Please enter a valid IP."
                fi
            done
            echo -e "Network settings have been updated, and network has been refreshed.\nPlease connect using the new IP.\nExiting script."
            systemctl restart networking
            exit 1
            ;;
        2)
            # Wireguard Server Install and Setup
			echo -e "Starting the installation of the Wireguard server...\nStarting update and upgrade for this machine..."
            apt update &> /dev/null && apt upgrade -y &> /dev/null
            echo "apt update and apt upgrade have completed."

	    # looks for and installs systemd-resolved
	    check_install "systemd-resolved"

            # Loop until valid input
            while true; do
                read -p "Enter a DNS for Resolved to use (input the gateway or firewall here): " ip
                if is_valid_ip "$ip"; then
                    echo "Valid IP address: $ip"
                    sed -i "/^#\?DNS=/c\DNS=$ip" "$resolved_path"
                    systemctl restart systemd-resolved.service
                        if ping -q -c 1 -w 1 "$ip" &> /dev/null ; then
                            echo "ping to "$ip" was successful. Continuing with Installation..."
                            break
                        else
                            echo "ping was unsuccessful, please try again."
                        fi
                else
                    echo "Invalid IP! Please enter a correct IP address (0.0.0.0 - 255.255.255.255)."
                fi
            done

            # looks for and installs the rest of the needed applications
	    check_install "iptables"
	    check_install "openssh-client"
	    check_install "openssh-server"
	    check_install "openssh-sftp-server"
	    check_install "wireguard"

	    # checks to see if the private and public keys are generated.
	    if [ ! -f /etc/wireguard/private.key ]; then
		umask 077 && wg genkey > /etc/wireguard/private.key
	    fi

	    if [ ! -f /etc/wireguard/public.key ]; then
		wg pubkey < /etc/wireguard/private.key > /etc/wireguard/public.key
	    fi

	    # stores the private and public keys in variables for later use.
	    private_key=$(cat /etc/wireguard/private.key)
	    public_key=$(cat /etc/wireguard/public.key)

	    # Exports the varibles to be used ouside of the script
	    echo "export private_key=$private_key" >> ~/.bashrc
	    echo "export public_key=$public_key" >> ~/.bashrc

	    # sets variable for the interface being used.
	    interf=$(grep '^\s*iface\s\+\w\+\s\+inet\s\+static' /etc/network/interfaces | awk '{print $2}')

	    # Checks and makes the config folder
	    if [ ! -f /etc/wireguard/wg0.conf ]; then
		cat <<EOF > /etc/wireguard/wg0.conf
[Interface]
PrivateKey = $private_key
Address = 10.15.0.1/32
ListenPort = 51820

# IP forwarding
PreUp = sysctl -w net.ipv4.ip_forward=1

# This makes the server act as a router on the network.
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o $interf -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o $interf -j MASQUERADE
EOF
	    fi
 
	    # print the public key for the user to use in clients.
	    echo -e "\nPrinting the Public key\n\n$public_key\n\n"
	    echo "Please copy this key to use for setting up the client"
	    echo "The Wireguard Server installation has been completed!"
            ;;
        3)
	    # Start of the config for peers for the Server
	    echo -e "\nWhat would you like to do?"
	    while true; do
	        read -p $'\n1. Add a new Peer.\n2. Remove a Peer.\n3. Edit a Peer.\n4. Exit back to the main menu\n: ' peer_choice
		case "$peer_choice" in
		    1)
				# Add a Peer

				# List the peers
				echo -e "\nHere are the list of Peers currently configured:\n"
			    awk -F' = |# ' '/#/{name=$2} /AllowedIPs/{print name, $2}' /etc/wireguard/wg0.conf

				# User input
				read -p $'\nEnter a name for the peer\n: ' peer_name
				read -p $'Enter the IP for the peer to use\n: ' peer_ip
				read -p $'Enter the public key from the client peer\n: ' peer_key
	
				invalid_input=false
	
				if ! is_valid_ip "$peer_ip"; then
					echo "'$peer_ip' is not a valid IP Address."
					invalid_input=true
				fi
	
				if ! key_check "$peer_key"; then
			    	echo "'$peer_key' is not a valid public key."
			    	invalid_input=true
				fi
	
				if [[ "$invalid_input" == false ]]; then
			    	cat <<EOF >> /etc/wireguard/wg0.conf
[Peer]
# $peer_name
PublicKey = $peer_key
AllowedIPs = $peer_ip/32
EOF
			    	echo "Peer added successfully."
				else
			    	echo "Input not valid. Please double check your input."
				fi
			;;
		    2)
				# Delete a peer
				while true; do
			    	# List the peers
					echo -e "\nHere are the list of Peers currently configured:\n"
			    	awk -F' = |# ' '/#/{name=$2} /AllowedIPs/{print name, $2}' /etc/wireguard/wg0.conf

			    	# Ask the user which peer they would like to select
			    	read -p $'\nWhich user would you like to delete?\n: ' user_select
			    	if grep -q "# $user_select" /etc/wireguard/wg0.conf; then
						sed -i "/\[Peer\]/ { N; /\n# $user_select/ { N; N; d; } }" /etc/wireguard/wg0.conf
						sed -i '/^$/N;/^\n$/D' /etc/wireguard/wg0.conf
					echo "User '$user_select' deleted."
						break
			    	else
						echo "User not found, please try again."
			    	fi
				done
			;;
			3)
				# Edit a peer.
				while true; do
				    # List the peers
				    echo -e "\nHere are the list of Peers currently configured:\n"
			        awk -F' = |# ' '/#/{name=$2} /AllowedIPs/{print name, $2}' /etc/wireguard/wg0.conf

				    # User choice to edit
					read -p $'\nWhich user would you like to edit?\n: ' user_select2
					if grep -q "# $user_select2" /etc/wireguard/wg0.conf; then
						read -p $'Which setting would you like to edit?\n\n1. Change the Public Key\n2. Change the users IP\n3. Exit back to the previous menu\n: ' setting_select
						case "$setting_select" in
							1)
								while true; do
                                    read -p 'Please enter the Public Key you would like to use: ' new_public_key
								    # change the public key
								    if key_check "$new_public_key"; then
                                        sed -i "/^PublicKey =/c\PublicKey = $new_public_key" /etc/wireguard/wg0.conf
								        echo "Public Key has been changed. Please restart the Wireguard server for it to take affect."
								        break
                                    else
                                        echo "Key is not a valid key. Please try again."
                                    fi
                                done
							;;
							2)
								while true; do
                                    read -p 'Please enter the new IP you would like to use: ' new_ip
								    # change the ip
								    if is_valid_ip "$new_ip"; then
                                        sed -i "/# $user_select2/,/^\[Peer\]/ { s/^AllowedIPs =.*/AllowedIPs = ${new_ip}\/32/ }" /etc/wireguard/wg0.conf
								        echo "The IP has been changed. Please restart the Wireguard server for it to take affect."
								        break
                                    else
                                        echo "IP is not valid. Please try again."
                                    fi
                                done
                            ;;
                            3)
                                # Exit to the previous menu
                                echo "Exiting..."
                                break
							;;
						esac
						break
					else
						echo "User not found. Try again."
					fi
				done

			;;
		    4)
				# Exit
				echo "Exiting the peer configuration menu."
				break
			;;
		esac
	    done
			;;
	exit)
            echo "The script will now exit."
            break
            ;;
        *)
            echo "Invalid Option."
            ;;
    esac
done

