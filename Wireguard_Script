#!/bin/bash

# Global Variables
resolved_path=/etc/systemd/resolved.conf
net_int=/etc/network/interfaces

# Function to check if the entered IP is valid for the systemd-resolved configuration.
is_valid_ip() {
    local ip=$1
    local IFS='.'
    local -a octets=($ip)

    [[ "${octets[0]}" -eq 127 ]] && return 1
    [[ ${#octets[@]} -ne 4 ]] && return 1

    # Check each octet is between 0 and 255
    for octet in "${octets[@]}"; do
        [[ ! "$octet" =~ ^[0-9]+$ ]] && return 1
        ((octet < 0 || octet > 255)) && return 1
    done

    return 0  # IP is valid
}

#Function to check the user's CIDR input to make sure it's within 0-32.
cidr_check() {
    local cidr=$1
    [[ $cidr =~ ^[0-9]+$ ]] || return 1
    ((cidr >= 0 && cidr <= 32))
}

# Function to check installs of important apps.
check_install() {
    local install_name="$1"
	echo "looking for $install_name..."
    if ! dpkg -l | awk '{print $2}' | grep -xq "$install_name"; then
	    echo "Installing $install_name..."
	    apt install $install_name -y &> /dev/null
	    if dpkg -l | awk '{print $2}' | grep -xq "$install_name"; then
		    echo "$install_name has been successfully installed."
	    else
		    echo "Installation failed. Please clear the error and try again."
		    exit 1
	    fi
	else
	    echo "$install_name is already installed. Continuing..."
	fi
}

# Function to check input is 256-bit key
key_check() {
    local key="$1"
    [[ "$key" =~ ^[A-Za-z0-9+/]{43}=$ ]] && return 0
    return 1
}

# Function to check if a port number is between 1-65355.
port_num_check() {
    local num="$1"

    [[ ! $num =~ ^[1-9][0-9]*$ ]] && return 1  # Ensure it's a positive integer
    (( num < 1 || num > 65535 )) && return 1   # Ensure it's within the valid port range

    return 0
}


# Start of the Script with options.
while true; do
    # Input from user
    read -p $'\nChoose the install type:\n\n1. (OPTIONAL) Set Static IP\n2. Wireguard Server Install and Setup\n3. Wireguard Server Peer Config\n4. Client Peer Install and Setup\n5. Client Peer Config\n6. Troubleshooting and help\n7. Delete and cleanup\nType "exit" to exit the script\n: ' install_type
    case "$install_type" in
        1)
			# Static IP configuration
            echo -e "\n***WARNING***\nOnce you change the IP, you WILL be disconnected.\nYou will need to re-connect using the correct IP.\n"

            # checks to see if network is DHCP, then changes it to static and adds address and gateway.
            echo "Setting up network config file for static deployment"
            if grep -q dhcp $net_int; then
                sed -i 's/dhcp/static/' $net_int \
                && echo -e "        address\n        gateway" >> $net_int
            fi

            # Edits the IP
            while true; do
                read -p $'Input the static IP you would like the Wireguard Server to use. (e.g. 192.168.1.2)\n: ' static_ip
                if is_valid_ip "$static_ip"; then
                    while true; do
                        echo "Are you sure you want to use $static_ip? (y/n)"
			            read -p ": " static_confirm
                        if [[ $static_confirm == y ]]; then
                            if grep -q address $net_int; then
                                sed -i "/address/c\        address "$static_ip" " $net_int \
                                && echo "Address has been changed."
                                break 2
                            else
                                echo -e "Failed to change address. Please make sure dhcp is on the correct line.\nExiting Script."
                                exit 1
                            fi
                        elif [[ $static_confirm == n ]]; then
                            echo "Please try again."
                            break
                        else
                            echo "not a valid answer. Please use \"y\" or \"n\"."
                        fi
                    done
                else
                    echo "not a valid IP. Please enter a valid IP."
                fi
            done

            # Adds the CIDR notation to the end of the IP.
            while true; do
                read -p $'Enter the subnet in CIDR notation. (e.g. 24)\n: ' cidr_input
                if cidr_check "$cidr_input"; then
                    while true; do
                        echo "Are you sure you want to use $cidr_input? (y/n)"
			            read -p ": " cidr_confirm
                        if [[ $cidr_confirm == y ]]; then
                            if grep -q "$static_ip" $net_int; then
                                sed -i "/"$static_ip"/c\        address "$static_ip"\/"$cidr_input" " $net_int \
                                && echo "Subnet has been added."
                                break 2
                            else
                                echo -e "Failed to change subnet. Please make sure dhcp is on the correct line.\nExiting Script."
                                exit 1
                            fi
                        elif [[ $cidr_confirm == n ]]; then
                            echo "Please try again."
                        else
                            echo "not a valid answer. Please use \"y\" or \"n\"."
                        fi
                    done
                else
                    echo "Not a valid input. Please choose a number 0-32."
                fi
            done

            # Edits the Gateway
            while true; do
                read -p $'Input the gateway\n: ' static_gw
                if is_valid_ip "$static_gw"; then
                    while true; do
                        echo "Are you sure you want to use $static_gw? (y/n)"
                        read -p ": " static_gw_confirm
                        if [[ $static_gw_confirm = y ]]; then
                            if grep -q address $net_int; then
                                sed -i "/gateway/c\        gateway "$static_gw" " $net_int \
                                && echo "Gateway has been changed."
                                break 2
                            else
                                echo -e "Failed to change Gateway. Please make sure dhcp is on the correct line.\nExiting Script."
                                exit 1
                            fi
                        elif [[ $static_gw_confirm = n ]]; then
                            echo "Please try again."
                        else
                            echo "not a valid answer. Please use \"y\" or \"n\"."
                        fi
                    done
                else
                    echo "not a valid IP. Please enter a valid IP."
                fi
            done
            echo -e "Network settings have been updated, and network has been refreshed.\nPlease connect using the new IP.\nExiting script."
            systemctl restart networking
            exit 1
            ;;
        2)
            # Checks to see if the config file is already there, if it is, it will break.
			if [ -f /etc/wireguard/wg0.conf ]; then
                echo " **WARNING** Wireguard config found, please run the cleanup option if you need to reinstall."
                continue
            fi

            # Wireguard Server Install and Setup
			echo -e "Starting the installation of the Wireguard server...\nStarting update and upgrade for this machine..."
            export DEBIAN_FRONTEND=noninteractive
            apt update &> /dev/null && apt upgrade -y &> /dev/null
            echo "apt update and apt upgrade have completed."

	        # looks for and installs systemd-resolved
	        check_install "systemd-resolved"

            # Loop until valid input
            while true; do
                read -p "Enter a DNS for Resolved to use (input the gateway or firewall here): " ip
                if is_valid_ip "$ip"; then
                    echo "Valid IP address: $ip"
                    sed -i "/^#\?DNS=/c\DNS=$ip" "$resolved_path"
                    systemctl restart systemd-resolved.service
                        if ping -q -c 1 -w 1 "$ip" &> /dev/null ; then
                            echo "ping to "$ip" was successful. Continuing with Installation..."
                            break
                        else
                            echo "ping was unsuccessful, please try again."
                        fi
                else
                    echo "Invalid IP! Please enter a correct IP address (0.0.0.0 - 255.255.255.255)."
                fi
            done

            # looks for and installs the rest of the needed applications
	        check_install "iptables"
	        check_install "openssh-client"
	        check_install "openssh-server"
	        check_install "openssh-sftp-server"
	        check_install "wireguard"

	        # checks to see if the private and public keys are generated.
	        if [ ! -f /etc/wireguard/private.key ]; then
		    umask 077 && wg genkey > /etc/wireguard/private.key
	        fi

	        if [ ! -f /etc/wireguard/public.key ]; then
		    wg pubkey < /etc/wireguard/private.key > /etc/wireguard/public.key
	        fi

	        # stores the private and public keys in variables for later use.
	        private_key=$(cat /etc/wireguard/private.key)
	        public_key=$(cat /etc/wireguard/public.key)

	        # Exports the varibles to be used ouside of the script
	        echo "export private_key=$private_key" >> ~/.bashrc
	        echo "export public_key=$public_key" >> ~/.bashrc

	        # sets variable for the interface being used.
	        interf=$(grep '^\s*iface\s\+\w\+\s\+inet\s\+static' /etc/network/interfaces | awk '{print $2}')

	        # Checks and makes the config folder
	        if [ ! -f /etc/wireguard/wg0.conf ]; then
		    cat <<EOF > /etc/wireguard/wg0.conf
[Interface]
PrivateKey = $private_key
Address = 10.15.0.1/32
ListenPort = 51820

# IP forwarding
PreUp = sysctl -w net.ipv4.ip_forward=1

# This makes the server act as a router on the network.
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o $interf -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o $interf -j MASQUERADE
EOF
	        fi

            # Enables the Wg0 as a service to start on boot.
            systemctl enable wg-quick@wg0.service \
            && systemctl daemon-reload \
            && systemctl start wg-quick@wg0

	        # print the public key for the user to use in clients.
	        echo -e "\nPrinting the Public key\n\n$public_key\n\n"
	        echo "Please copy this key to use for setting up the client"
	        echo "The Wireguard Server installation has been completed!"
        ;;
        3)
	        # Start of the config for peers for the Server
	    
	        while true; do

                if [ ! -f /etc/wireguard/wg0.conf ]; then
                    echo " **WARNING** Wireguard config file not found, please run either the Wireguard Server or Wireguard Peer setup."
                    break
                fi

                if grep -q '^EndPoint' /etc/wireguard/wg0.conf; then
                    echo -e "\n **WARNING** This config file is set up to be a Peer. Please run the \"Client Peer Config\" option instead."
                    break
                fi

            # Displays the users before selection.
            echo -e "\nHere are the list of Peers currently configured:\n"
            awk -F' = |# ' '/#/{name=$2} /AllowedIPs/{print name, $2}' /etc/wireguard/wg0.conf

            # Starts the selection
            echo -e "\nServer Peer Configuration"
	        read -p $'\n1. Add a new Peer.\n2. Remove a Peer.\n3. Edit a Peer.\n4. Exit back to the main menu\n: ' peer_choice
		    case "$peer_choice" in
		        1)
				    # Add a Peer

				    # List the peers
			        if [ -f /etc/wireguard/wg0.conf ]; then
			            echo -e "\nHere are the list of Peers currently configured:\n"
                        awk -F' = |# ' '/#/{name=$2} /AllowedIPs/{print name, $2}' /etc/wireguard/wg0.conf
                        read -p $'\nEnter a name for the peer\n: ' peer_name
                    else
                        echo "Wireguard config file not found, please run either the Wireguard Server or Wireguard Peer setup."
                        break
                    fi
                
                
				    # User input
                    while true; do
                        read -p $'Enter the IP for the peer to use\n: ' peer_ip
				        if ! is_valid_ip "$peer_ip"; then
					        echo "'$peer_ip' is not a valid IP Address."
                        else
                            break
				        fi
                    done

                    while true; do
                        read -p $'Enter the public key from the client peer\n: ' peer_key
				        if ! key_check "$peer_key"; then
			    	        echo "'$peer_key' is not a valid public key."
                        else
                            break
				        fi
                    done
                
                    while true; do
                        if [ -f /etc/wireguard/wg0.conf ]; then
			    	    cat <<EOF >> /etc/wireguard/wg0.conf
[Peer]
# $peer_name
PublicKey = $peer_key
AllowedIPs = $peer_ip/32
EOF
			    	    echo "Peer added successfully. Restarting Wireguard..." \
                        && systemctl restart wg-quick@wg0.service
                        break
				    fi
                done
			;;
		    2)
				# Delete a peer
				
                # List the peers
                if [ -f /etc/wireguard/wg0.conf ]; then
			    	echo -e "\nHere are the list of Peers currently configured:\n" 
                    awk -F' = |# ' '/#/{name=$2} /AllowedIPs/{print name, $2}' /etc/wireguard/wg0.conf
                 else
                    echo "Wireguard config file not found, please run either the Wireguard Server or the Wireguard Peer Setup."
                    break
                fi
			    	
                # Ask the user which peer they would like to select
                while true; do
			    	read -p $'\nWhich user would you like to delete? (case sensitive)\n: ' user_select
			    	if grep -q "# $user_select" /etc/wireguard/wg0.conf; then
						sed -i "/\[Peer\]/ { N; /\n# $user_select/ { N; N; d; } }" /etc/wireguard/wg0.conf
						sed -i '/^$/N;/^\n$/D' /etc/wireguard/wg0.conf
					    echo "User '$user_select' deleted." \
                        && systemctl restart wg-quick@wg0.service
						break
			    	else
						echo "User not found, please try again."
			    	fi
				done
			;;
			3)
				# Edit a peer.
				# List the peers
			    if [ -f /etc/wireguard/wg0.conf ]; then
			    	echo -e "\nHere are the list of Peers currently configured:\n"
                    awk -F' = |# ' '/#/{name=$2} /AllowedIPs/{print name, $2}' /etc/wireguard/wg0.conf
                else
                    echo "Wireguard config file not found, please run either the Wireguard Server or Wireguard Peer setup."
                    break
                fi

                while true; do
				    # User choice to edit
					read -p $'\nWhich user would you like to edit? (case sensitive)\n: ' user_select2
					if grep -q "# $user_select2" /etc/wireguard/wg0.conf; then
						read -p $'Which setting would you like to edit?\n\n1. Change the Public Key\n2. Change the users IP\n3. Exit back to the previous menu\n: ' setting_select
						case "$setting_select" in
							1)
								while true; do
                                    read -p $'Please enter the Public Key you would like to use\n: ' new_public_key
								    # change the public key
								    if key_check "$new_public_key"; then
                                        sed -i "/# $user_select2/,/^\[Peer\]/ { s|^PublicKey =.*|PublicKey = ${new_public_key}| }" /etc/wireguard/wg0.conf
								        echo "Public Key has been changed. Restarting Wireguard..." \
                                        && systemctl restart wg-quick@wg0.service
								        break
                                    else
                                        echo "Key is not a valid key. Please try again."
                                    fi
                                done
							;;
							2)
								while true; do
                                    read -p $'Please enter the new IP you would like to use\n: ' new_ip
								    # change the ip
								    if is_valid_ip "$new_ip"; then
                                        sed -i "/# $user_select2/,/^\[Peer\]/ { s/^AllowedIPs =.*/AllowedIPs = ${new_ip}\/32/ }" /etc/wireguard/wg0.conf
								        echo "The IP has been changed. Restarting Wireguard..." \
                                        && systemctl restart wg-quick@wg0.service
								        break
                                    else
                                        echo "IP is not valid. Please try again."
                                    fi
                                done
                            ;;
                            3)
                                # Exit to the previous menu
                                echo "Exiting..."
                                break
							;;
						esac
						break
					else
						echo "User not found. Try again."
					fi
				done

			;;
		    4)
				# Exit
				echo "Exiting the peer configuration menu."
				break
			;;
		esac
	    done
        ;;
        4)
            # Checks to see if the config file is already there, if it is, it will break.
			if [ -f /etc/wireguard/wg0.conf ]; then
                echo " **WARNING** Wireguard config found, please run the cleanup option if you need to reinstall."
                continue
            fi

            # Client Peer Setup
            echo -e "Starting the installation of the Wireguard Client...\nStarting update and upgrade for this machine..."
            export DEBIAN_FRONTEND=noninteractive
            apt update &> /dev/null && apt upgrade -y &> /dev/null
            echo "apt update and apt upgrade have completed."

            # Checks on wireguard being installed. 
            check_install "wireguard"

	        # checks to see if the private and public keys are generated.
	        if [ ! -f /etc/wireguard/private.key ]; then
		    umask 077 && wg genkey > /etc/wireguard/private.key
	        fi

	        if [ ! -f /etc/wireguard/public.key ]; then
		    wg pubkey < /etc/wireguard/private.key > /etc/wireguard/public.key
	        fi

	        # stores the private and public keys in variables for later use.
	        private_key=$(cat /etc/wireguard/private.key)
	        public_key=$(cat /etc/wireguard/public.key)

	        # Exports the varibles to be used ouside of the script
	        echo "export private_key=$private_key" >> ~/.bashrc
	        echo "export public_key=$public_key" >> ~/.bashrc

            # Start of the checking inputs process
            while true; do
                read -p $'Please enter the IP Address for this Peer\n: ' peer_address
                if is_valid_ip "$peer_address"; then
                    break
                else
                    echo "The Peer Address is not valid. Please try again."
                fi
            done

            while true; do
                read -p $'Please enter in the Public Key of the Wireguard Server this Peer is connecting to\n: ' peer_pk
                if key_check "$peer_pk"; then
                    break
                else
                    echo "The Public Key is not valid. Please try again."
                fi
            done

            while true; do
                read -p $'Please enter the Allowed Network (Note: 0.0.0.0 is full tunnel. Please use a 0 in the 4th octet)\n: ' allowed_ips_peer
                if is_valid_ip "$allowed_ips_peer"; then
                    break
                else
                    echo "The IP entered is not valid. Please try again."
                fi
            done

            while true; do
                read -p $'Please enter the CIDR of your Allowed Network\n: ' allowed_ip_cidr
                if cidr_check "$allowed_ip_cidr"; then
                    break
                else
                    echo "The CIDR notation was entered incorrectly. Please try again."
                fi
            done

            while true; do
                read -p $'Please enter the Endpoint IP of the Wireguard Server this Peer is connecting to (WAN for outside peers)\n: ' endpoint_address
                if is_valid_ip "$endpoint_address"; then
                    break
                else
                    echo "The Endpoint address is not a valid address. Please try again."
                fi
            done

            while true; do
                read -p $'Please enter the port number the Wireguard Server is using\n(Default is 51820): ' port_num
                if port_num_check "$port_num"; then
                    break
                else
                    echo "The port number is not a valid port number. Please try again."
                fi
            done

            # Checks and makes the config folder
	        if [ ! -f /etc/wireguard/wg0.conf ]; then
		    cat <<EOF > /etc/wireguard/wg0.conf
[Interface]
PrivateKey = $private_key
Address = $peer_address/32

[Peer]
# Wireguard VM server on local Proxmox
PublicKey = $peer_pk
AllowedIPs = $allowed_ips_peer/$allowed_ip_cidr
EndPoint = $endpoint_address:$port_num
EOF
	        fi

            # print the public key for the user to use in the Peer option for the remote server.
	        echo -e "\nPrinting the Public key\n\n$public_key\n\n"
	        echo "Please copy this key to use for setting up a Peer on the Remote Wireguard Server."
            echo "Starting the Wireguard Service... If you have set up a full tunnel, you will lose connection."
            # Enables the Wg0 as a service to start on boot.
            systemctl enable wg-quick@wg0.service \
            && systemctl daemon-reload \
            && systemctl start wg-quick@wg0 \
            && echo "The Client Peer setup has been completed!"
        ;;
        5)
            # Client Peer Config
            while true; do
                # Edit the Client Peer Configuration file.
			    if [ ! -f /etc/wireguard/wg0.conf ]; then
                    echo " **WARNING** Wireguard config file not found, please run either the Wireguard Server or Wireguard Peer setup."
                    break
                fi

                if grep -q '^PreUp' /etc/wireguard/wg0.conf; then
                    echo -e "\n **WARNING** This config file is set up to be a Server. Please run the \"Wireguard Server Peer Config\" option instead."
                    break
                fi

                read -p $'\nChoose which option you would like to edit\n\n1. Edit the peer address\n2. Edit the remote Wireguard Public Key\n3. Edit Allowed Networks\n4. Edit the IP and port of the EndPoint. (Remote WG WAN and port)\n5. Exit to the previous menu\n: ' client_input
                case "$client_input" in
                    1)
                        # Edit the IP Address
                        while true; do
                            echo -e "\nHere is the IP for this connection:"
                            grep '^Address' /etc/wireguard/wg0.conf
                            read -p $'\nPlease enter the new IP you would like to use\n: ' new_peer_ip
							# change the ip
							if is_valid_ip "$new_peer_ip"; then
								sed -i "/^Address =/c\Address = $new_peer_ip" /etc/wireguard/wg0.conf
                                echo "The IP has been changed. Restarting Wireguard..." \
                                && systemctl restart wg-quick@wg0.service
								break
                            else
                                echo "IP is not valid. Please try again."
                            fi
                        done
                    ;;
                    2)
                        # Edit the Public Key of the Remote Wireguard server this Peer is connecting to.
                        while true; do
                            echo -e "\nHere is the Public Key for the Remote Wireguard Server:\n"
                            grep '^PublicKey' /etc/wireguard/wg0.conf
                            read -p $'\nPlease enter the new Public Key\n: ' new_peer_public_key
							# change the public key
							if key_check "$new_peer_public_key"; then
                                sed -i "/^PublicKey =/c\PublicKey = $new_peer_public_key" /etc/wireguard/wg0.conf
								echo "Public Key has been changed. Restarting Wireguard..." \
                                && systemctl restart wg-quick@wg0.service
								break
                            else
                                echo "Key is not a valid key. Please try again."
                            fi
                        done
                    ;;
                    3)
                        # Edit Allowed Networks's
                        while true; do
                            echo -e "\nHere is a list of the networks that are allowed for this Peer (0.0.0.0/0 is default and means a full tunnel connection):\n"
                            grep '^AllowedIPs' /etc/wireguard/wg0.conf
                            echo -e "\nNOTE: Please use a 0 in the 4th octet"
                            read -p $'1. Change the network of AllowedIPs (This will change the line back to one network allowed.)\n2. Append a new network to end of the AllowedIP list\n3. Exit to the previous menu\n: ' allowed_input
                            case "$allowed_input" in
                                1)
                                    # Change the IP
                                    while true; do
                                        read -p $'Enter the IP network you would like to use\n: ' allowed_ip_input
                                        if is_valid_ip "$allowed_ip_input"; then
                                            sed -i "/^AllowedIPs =/c\AllowedIPs = $allowed_ip_input" /etc/wireguard/wg0.conf
                                            break
                                        else
                                            echo "Not a valid IP. Please try again."
                                        fi
                                    done
                                    while true; do
                                        read -p $'Enter the CIDR notation (like /24 or /0)\n: ' allowed_cidr_input
                                        if cidr_check "$allowed_cidr_input"; then
                                            sed -i "/^AllowedIPs/s|$|/$allowed_cidr_input|" /etc/wireguard/wg0.conf \
                                            && systemctl restart wg-quick@wg0.service
                                            echo "Allowed Network has been updated and the Wireguard service has been restarted."
                                            break
                                        else
                                            echo "not a valid input. Please try again."
                                        fi
                                    done
                                ;;
                                2)
                                    # Append a new Allowed network.
                                    while true; do
                                        read -p $'Enter the IP network you would like for Wireguard to be able to access\n: ' allowed_ip_input2
                                        if is_valid_ip "$allowed_ip_input2"; then
                                            sed -i "/^AllowedIPs/s|$|, $allowed_ip_input2|" /etc/wireguard/wg0.conf \
                                            && systemctl restart wg-quick@wg0.service
                                            echo "Allowed Network has been updated and the Wireguard service has been restarted."
                                            break
                                        else
                                            echo "not a valid input. Please try again."
                                        fi
                                    done
                                    while true; do
                                        read -p $'Enter the CIDR notation for that network (like /24 or /0)\n: ' allowed_cidr_input2
                                        if cidr_check "$allowed_cidr_input2"; then
                                            sed -i "/^AllowedIPs/s|$|/$allowed_cidr_input2|" /etc/wireguard/wg0.conf \
                                            && systemctl restart wg-quick@wg0.service
                                            echo "Allowed Network has been updated and the Wireguard service has been restarted."
                                            break
                                        else
                                            echo "not a valid input. Please try again."
                                        fi
                                    done
                                ;;
                                3)
                                    # Exit the menu
                                    break
                                ;;
                            esac
                        done
                    ;;
                    4)
                        # Edit the Endpoint of the remote Wireguard server this Peer is connecting to
                        while true; do
                            echo -e "\nHere is the Endpont IP and port of the remote Wireguard Server this peer connects to:"
                            grep '^EndPoint' /etc/wireguard/wg0.conf
							read -p $'\n1. Change the Remote Endpoint IP (This is the IP used to communicate to the remote Wireguard Server)\n2. Change the port\n3. Exit to the previous menu\n: ' wan_peer_input
                            case "$wan_peer_input" in
							    1)
                                    # Change the Endpoint for connection.
                                    while true; do
                                        read -p $'Enter the Remote Server IP for this peer to connect to\n: ' wan_peer_change
                                        if is_valid_ip "$wan_peer_change"; then
                                            sed -i -E "s/(EndPoint = )[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(:[0-9]+)/\1$wan_peer_change\2/" /etc/wireguard/wg0.conf
								            echo "The IP has been changed. Restarting Wireguard..." \
                                            && systemctl restart wg-quick@wg0.service
								            break
                                        else
                                            echo "IP is not valid. Please try again."
                                        fi
                                    done
                                ;;
                                2)
                                    # Change the port.
                                    while true; do
                                        read -p $'Enter the new port number of the remote Wireguard Server\n: ' port_peer_change
                                        if port_num_check "$port_peer_change"; then
                                            sed -i -E "s/(EndPoint = [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:)[0-9]+/\1$port_peer_change/" /etc/wireguard/wg0.conf
                                            echo "The port has been changed. Restarting Wireguard..." \
                                            && systemctl restart wg-quick@wg0.service
								            break
                                        else
                                            echo "Port is not valid. Please try again."
                                        fi
                                    done
                                ;;
                                3)
                                    # exit to the previous menu
                                    break
                                ;;
                            esac
                        done
                    ;;
                    5)
                        # Goes back to the main menu
                        break
                    ;;
                    *)
                        echo "Not a valid Option. Please try again."
                    ;;
                esac
            done
        ;;
        6)
            # Troubleshooting and Help.
            while true; do
                echo -e "\nTroubleshooting and help. Choose an option:"
                echo "1. wg (Command to see peers and public key"
                echo "2. Print out the configuration file"
                echo "3. Useful Commands"
                echo "4. Exit"
                read -p ": " help_input

                # Start of menu
                case "$help_input" in
                    1)
                        # Wireguard command to print connections and public key
                        wg
                    ;;
                    2)
                        # Prints the config file
                        echo -e "\n"
                        cat /etc/wireguard/wg0.conf
                    ;;
                    3)
                        # Prints Useful Commands
                        # Define color codes
                        GREEN="\e[32m"
                        NC="\e[0m" # No Color

                        commands_text=$(cat <<EOF

${GREEN}wg${NC} (Command for Wireguard to print connections and public key of server)
${GREEN}systemctl start wg-quick@wg0${NC} (Starts the Wireguard service)
${GREEN}systemctl stop wg-quick@wg0${NC} (Stops the Wireguard service)
${GREEN}systemctl restart wg-quick@wg0${NC} (Restarts the Wireguard service)
${GREEN}nano /etc/wireguard/wg0.conf${NC} (Edits the config file)
${GREEN}cat /etc/wireguard/public.key${NC} or ${GREEN}echo \$public_key${NC} (Prints the Public Key of the server)
${GREEN}cat /etc/wireguard/private.key${NC} or ${GREEN}echo \$private_key${NC} (Prints the Private Key of the server)

EOF
)

                        # Print the formatted text
                        echo -e "$commands_text"
                    ;;
                    4)
                        # Exits this loop
                        break
                    ;;
                    *)
                        echo "Not a valid option. Please try again."
                    ;;
                esac
            done
        ;;
	    7)
            while true; do
                echo -e "\n **WARNING** THIS WILL UNINSTALL AND REMOVE THE WIREGUARD CONFIGURATION"
                read -p $'\nAre you sure you want to proceed with the cleanup? (y/n)\n: ' cleanup_input
                if [[ $cleanup_input == y ]]; then
                    rm -f /etc/wireguard/wg0.conf
                    rm -f /etc/wireguard/public.key
                    rm -f /etc/wireguard/private.key
                    rm -r /etc/wireguard/
                    apt-get remove --purge wireguard wireguard-tools -y \
                    && apt autoremove -y \
                    && modprobe -r wireguard
                    unset public_key
                    unset private_key
                    echo -e "\nWireguard and it's configuration have been removed."
                    break
                elif [[ $cleanup_input == n ]]; then
                    echo "Cleanup canceled."
                    break
                else
                    echo "Invalid input. Please enter 'y' or 'n'."
                fi
            done
	    ;;
        exit)
            echo "The script will now exit."
            break
        ;;
        *)
            echo "Invalid Option."
        ;;
    esac
done
