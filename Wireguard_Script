#!/bin/bash

# Global Variables
resolved_path=/etc/systemd/resolved.conf
net_int=/etc/network/interfaces

# Function to check if the entered IP is valid for the systemd-resolved configuration.
is_valid_ip() {
    local ip=$1
    local IFS='.'
    local -a octets=($ip)

        [[ "${octets[0]}" -eq 127 ]] && return 1
        [[ ${#octets[@]} -ne 4 ]] && return 1

        # Check each octet is between 0 and 255
        for octet in "${octets[@]}"; do
            [[ ! "$octet" =~ ^[0-9]+$ ]] && return 1
            ((octet < 0 || octet > 255)) && return 1
        done

        return 0  # IP is valid
    }

#Function to check the user's CIDR input to make sure it's within 0-32.
cidr_check() {
    local cidr=$1
        [[ $cidr =~ ^[0-9]+$ ]] || return 1
	((cidr >= 0 && cidr <= 32))
}

# Start of the Script with options.
while true; do
    # Input from user
    read -p $'\nChoose the install type:\n\n1. (OPTIONAL) Set Static IP\n2. Wireguard Server\nType "exit" to exit the script: ' install_type
    case "$install_type" in
        1)
            echo -e "\n***WARNING***\nOnce you change the IP, you WILL be disconnected.\nYou will need to re-connect using the correct IP.\n"

            # checks to see if network is DHCP, then changes it to static and adds address and gateway.
            echo "Setting up network config file for static deployment"
            if grep -q dhcp $net_int; then
                sed -i 's/dhcp/static/' $net_int \
                && echo -e "        address\n        gateway" >> $net_int
            else
                :
            fi

            # Edits the IP
            while true; do
                read -p "Input the static IP you would like to use. (e.g. 192.168.0.1): " static_ip
                read -p "Are you sure you want to use "$static_ip"? y/n: " static_confirm
                if is_valid_ip "$static_ip"; then
                    if [[ $static_confirm = y ]]; then
                        if grep -q address $net_int; then
                            sed -i "/address/c\        address "$static_ip" " $net_int \
                            && echo "Address has been changed."
                            break
                        else
                            echo -e "Failed to change address. Please make sure dhcp is on the correct line.\nExiting Script."
                            exit 1
                        fi
                    elif [[ $static_confirm = n ]]; then
                        echo "Please try again."
                    else
                        echo "not a valid answer. Please use \"y\" or \"n\"."
                    fi
                else
                    echo "not a valid IP. Please enter a valid IP."
                fi
            done

            # Adds the CIDR notation to the end of the IP.
            while true; do
                read -p "Enter the subnet in CIDR notation. (e.g. 24): " cidr_input
                read -p "Are you sure you want to use "$cidr_input"? y/n: " cidr_confirm
                if cidr_check "$cidr_input"; then
                    if [[ $cidr_confirm = y ]]; then
                        if grep -q "$static_ip" $net_int; then
                            sed -i "/"$static_ip"/c\        address "$static_ip"\/"$cidr_input" " $net_int \
                            && echo "Subnet has been added."
                            break
                        else
                            echo -e "Failed to change subnet. Please make sure dhcp is on the correct line.\nExiting Script."
                            exit 1
                        fi
                    elif [[ $cidr_confirm = n ]]; then
                        echo "Please try again."
                    else
                        echo "not a valid answer. Please use \"y\" or \"n\"."
                    fi
                else
                    echo "Not a valid input. Please choose a number 0-32."
                fi
            done

            # Edits the Gateway
            while true; do
                read -p "Input the gateway: " static_gw
                read -p "Are you sure you want to use "$static_gw"? y/n: " static_gw_confirm
                if is_valid_ip "$static_gw"; then   
                    if [[ $static_gw_confirm = y ]]; then
                        if grep -q address $net_int; then
                            sed -i "/gateway/c\        gateway "$static_gw" " $net_int \
                            && echo "Gateway has been changed."
                            break
                        else
                            echo -e "Failed to change Gateway. Please make sure dhcp is on the correct line.\nExiting Script."
                            exit 1
                        fi
                    elif [[ $static_gw_confirm = n ]]; then
                        echo "Please try again."
                    else
                        echo "not a valid answer. Please use \"y\" or \"n\"."
                    fi
                else
                    echo "not a valid IP. Please enter a valid IP."
                fi
            done
            echo -e "Network settings have been updated, and network has been refreshed.\nPlease connect using the new IP\nExiting script."
            systemctl restart networking
            exit 1
            ;;
        2)
            echo -e "Starting the installation of the Wireguard server...\nStarting update and upgrade for this machine..."
            apt update &> /dev/null && apt upgrade -y &> /dev/null
            echo -e "apt update and apt upgrade have completed.\nLooking for systemd-resolved..."
            if ! dpkg -l | grep systemd-resolved &> /dev/null; then
                echo "systemd-resolved not found. Installing systemd-resolved..."
                apt install systemd-resolved -y &> /dev/null
                if dpkg -l | grep systemd-resolved &> /dev/null; then
                        echo "systemd-resolved has been successfully installed."
                    else
                        echo "Installation failed. Please clear the error and try again. Exiting Wireguard installation."
                        exit 1
                fi
            else
                echo "systemd-resolved is already installed. Continuing..."
            fi   

            # Loop until valid input
            while true; do
                read -p "Enter a DNS for Resolved to use (input the gateway or firewall here): " ip
                if is_valid_ip "$ip"; then
                    echo "Valid IP address: $ip"
                    sed -i "/^#\?DNS=/c\DNS=$ip" "$resolved_path"
                    systemctl restart systemd-resolved.service
                        if ping -q -c 1 -w 1 "$ip" &> /dev/null ; then
                            echo "ping to "$ip" was successful. Continuing with Installation..."
                            break
                        else
                            echo "ping was unsuccessful, please try again."
                        fi
                else
                    echo "Invalid IP! Please enter a correct IP address (0.0.0.0 - 255.255.255.255)."
                fi
            done

            #Install iptables
            echo "Looking for iptables..."
            if ! dpkg -l | grep iptables &> /dev/null; then
                echo "iptables not found. Installing iptables..."
                apt install iptables -y &> /dev/null
                if dpkg -l | grep iptables &> /dev/null; then
                        echo "iptables has been successfully installed."
                    else
                        echo "Installation failed. Please clear the error and try again. Exiting Wireguard installation."
                        exit 1
                fi
            else
                echo "iptables is already installed. Continuing..."
            fi

            #Install openssh
            echo "looking for openssh..."
            if ! dpkg -l | grep openssh &> /dev/null; then
                echo "Openssh not found. Installing openssh and it's dependencies..."
                apt install openssh-client -y &> /dev/null \
                && apt install openssh-server -y &> /dev/null \
                && apt install openssh-sftp-server -y &> /dev/null
                if dpkg -l | grep ssh &> /dev/null; then
                        echo "openssh and it's dependencies has been successfully installed."
                    else
                        echo "Installation failed. Please clear the error and try again. Exiting Wireguard installation."
                        exit 1
                fi
            else
                echo "Openssh is already installed. Continuing..."
            fi

	    #Generate the keys for the server to use.
	    echo "The installation has been completed!"
            break # Exit the loop
            ;;
        exit)
            echo "The script will now exit."
            break
            ;;
        *)
            echo "Invalid Option."
            ;;
    esac
done
